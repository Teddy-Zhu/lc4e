{"version":3,"sources":["webpack:////bundle/12.js","webpack:///./~/markdown-it-task-lists/index.js"],"names":["webpackJsonp","402","module","exports","attrSet","token","name","value","index","attrIndex","attr","attrPush","attrs","parentToken","tokens","targetLevel","level","i","isTodoItem","isInline","isParagraph","isListItem","startsWithTodoMarkdown","todoify","TokenConstructor","children","unshift","makeCheckbox","content","slice","useLabelWrapper","beginLabel","push","endLabel","checkbox","disabledAttr","disableCheckboxes","indexOf","type","md","options","enabled","label","core","ruler","after","state","length","Token"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAASC,EAAQC,GCuBvB,QAAAC,GAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAH,EAAAI,UAAAH,GACAI,GAAAJ,EAAAC,EAEAC,GAAA,EACAH,EAAAM,SAAAD,GAEAL,EAAAO,MAAAJ,GAAAE,EAIA,QAAAG,GAAAC,EAAAN,GAEA,OADAO,GAAAD,EAAAN,GAAAQ,MAAA,EACAC,EAAAT,EAAA,EAAwBS,GAAA,EAAQA,IAChC,GAAAH,EAAAG,GAAAD,QAAAD,EACA,MAAAE,EAGA,UAGA,QAAAC,GAAAJ,EAAAN,GACA,MAAAW,GAAAL,EAAAN,KACAY,EAAAN,EAAAN,EAAA,KACAa,EAAAP,EAAAN,EAAA,KACAc,EAAAR,EAAAN,IAGA,QAAAe,GAAAlB,EAAAmB,GACAnB,EAAAoB,SAAAC,QAAAC,EAAAtB,EAAAmB,IACAnB,EAAAoB,SAAA,GAAAG,QAAAvB,EAAAoB,SAAA,GAAAG,QAAAC,MAAA,GACAxB,EAAAuB,QAAAvB,EAAAuB,QAAAC,MAAA,GAEAC,IACAzB,EAAAoB,SAAAC,QAAAK,EAAAP,IACAnB,EAAAoB,SAAAO,KAAAC,EAAAT,KAIA,QAAAG,GAAAtB,EAAAmB,GACA,GAAAU,GAAA,GAAAV,GAAA,oBACAW,EAAAC,EAAA,kBAMA,OALA,KAAA/B,EAAAuB,QAAAS,QAAA,QACAH,EAAAN,QAAA,yCAAAO,EAAA,mBACE,IAAA9B,EAAAuB,QAAAS,QAAA,aAAAhC,EAAAuB,QAAAS,QAAA,UACFH,EAAAN,QAAA,oDAAAO,EAAA,oBAEAD,EAKA,QAAAH,GAAAP,GACA,GAAAnB,GAAA,GAAAmB,GAAA,mBAEA,OADAnB,GAAAuB,QAAA,UACAvB,EAGA,QAAA4B,GAAAT,GACA,GAAAnB,GAAA,GAAAmB,GAAA,mBAEA,OADAnB,GAAAuB,QAAA,WACAvB,EAGA,QAAAc,GAAAd,GAA0B,iBAAAA,EAAAiC,KAC1B,QAAAlB,GAAAf,GAA6B,yBAAAA,EAAAiC,KAC7B,QAAAjB,GAAAhB,GAA4B,yBAAAA,EAAAiC,KAE5B,QAAAhB,GAAAjB,GAEA,WAAAA,EAAAuB,QAAAS,QAAA,aAAAhC,EAAAuB,QAAAS,QAAA,aAAAhC,EAAAuB,QAAAS,QAAA,QA3FA,GAAAD,IAAA,EACAN,GAAA,CAEA5B,GAAAC,QAAA,SAAAoC,EAAAC,GACAA,IACAJ,GAAAI,EAAAC,QACAX,IAAAU,EAAAE,OAGAH,EAAAI,KAAAC,MAAAC,MAAA,sCAAAC,GAEA,OADAhC,GAAAgC,EAAAhC,OACAG,EAAA,EAAiBA,EAAAH,EAAAiC,OAAmB9B,IACpCC,EAAAJ,EAAAG,KACAM,EAAAT,EAAAG,GAAA6B,EAAAE,OACA5C,EAAAU,EAAAG,EAAA,6BACAb,EAAAU,EAAAD,EAAAC,EAAAG,EAAA","file":"/bundle/12.js","sourcesContent":["webpackJsonp([12],{\n\n/***/ 402:\n/***/ function(module, exports) {\n\n// Markdown-it plugin to render GitHub-style task lists; see\n//\n// https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments\n// https://github.com/blog/1825-task-lists-in-all-markdown-documents\n\nvar disableCheckboxes = true;\nvar useLabelWrapper = false;\n\nmodule.exports = function(md, options) {\n\tif (options) {\n\t\tdisableCheckboxes = !options.enabled;\n\t\tuseLabelWrapper = !!options.label;\n\t}\n\n\tmd.core.ruler.after('inline', 'github-task-lists', function(state) {\n\t\tvar tokens = state.tokens;\n\t\tfor (var i = 2; i < tokens.length; i++) {\n\t\t\tif (isTodoItem(tokens, i)) {\n\t\t\t\ttodoify(tokens[i], state.Token);\n\t\t\t\tattrSet(tokens[i-2], 'class', 'task-list-item');\n\t\t\t\tattrSet(tokens[parentToken(tokens, i-2)], 'class', 'task-list');\n\t\t\t}\n\t\t}\n\t});\n};\n\nfunction attrSet(token, name, value) {\n\tvar index = token.attrIndex(name);\n\tvar attr = [name, value];\n\n\tif (index < 0) {\n\t\ttoken.attrPush(attr);\n\t} else {\n\t\ttoken.attrs[index] = attr;\n\t}\n}\n\nfunction parentToken(tokens, index) {\n\tvar targetLevel = tokens[index].level - 1;\n\tfor (var i = index - 1; i >= 0; i--) {\n\t\tif (tokens[i].level === targetLevel) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\nfunction isTodoItem(tokens, index) {\n\treturn isInline(tokens[index]) &&\n\t       isParagraph(tokens[index - 1]) &&\n\t       isListItem(tokens[index - 2]) &&\n\t       startsWithTodoMarkdown(tokens[index]);\n}\n\nfunction todoify(token, TokenConstructor) {\n\ttoken.children.unshift(makeCheckbox(token, TokenConstructor));\n\ttoken.children[1].content = token.children[1].content.slice(3);\n\ttoken.content = token.content.slice(3);\n\n\tif (useLabelWrapper) {\n\t\ttoken.children.unshift(beginLabel(TokenConstructor));\n\t\ttoken.children.push(endLabel(TokenConstructor));\n\t}\n}\n\nfunction makeCheckbox(token, TokenConstructor) {\n\tvar checkbox = new TokenConstructor('html_inline', '', 0);\n\tvar disabledAttr = disableCheckboxes ? ' disabled=\"\" ' : '';\n\tif (token.content.indexOf('[ ] ') === 0) {\n\t\tcheckbox.content = '<input class=\"task-list-item-checkbox\"' + disabledAttr + 'type=\"checkbox\">';\n\t} else if (token.content.indexOf('[x] ') === 0 || token.content.indexOf('[X] ') === 0) {\n\t\tcheckbox.content = '<input class=\"task-list-item-checkbox\" checked=\"\"' + disabledAttr + 'type=\"checkbox\">';\n\t}\n\treturn checkbox;\n}\n\n// these next two functions are kind of hacky; probably should really be a\n// true block-level token with .tag=='label'\nfunction beginLabel(TokenConstructor) {\n\tvar token = new TokenConstructor('html_inline', '', 0);\n\ttoken.content = '<label>';\n\treturn token;\n}\n\nfunction endLabel(TokenConstructor) {\n\tvar token = new TokenConstructor('html_inline', '', 0);\n\ttoken.content = '</label>';\n\treturn token;\n}\n\nfunction isInline(token) { return token.type === 'inline'; }\nfunction isParagraph(token) { return token.type === 'paragraph_open'; }\nfunction isListItem(token) { return token.type === 'list_item_open'; }\n\nfunction startsWithTodoMarkdown(token) {\n\t// leading whitespace in a list item is already trimmed off by markdown-it\n\treturn token.content.indexOf('[ ] ') === 0 || token.content.indexOf('[x] ') === 0 || token.content.indexOf('[X] ') === 0;\n}\n\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// /bundle/12.js","// Markdown-it plugin to render GitHub-style task lists; see\n//\n// https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments\n// https://github.com/blog/1825-task-lists-in-all-markdown-documents\n\nvar disableCheckboxes = true;\nvar useLabelWrapper = false;\n\nmodule.exports = function(md, options) {\n\tif (options) {\n\t\tdisableCheckboxes = !options.enabled;\n\t\tuseLabelWrapper = !!options.label;\n\t}\n\n\tmd.core.ruler.after('inline', 'github-task-lists', function(state) {\n\t\tvar tokens = state.tokens;\n\t\tfor (var i = 2; i < tokens.length; i++) {\n\t\t\tif (isTodoItem(tokens, i)) {\n\t\t\t\ttodoify(tokens[i], state.Token);\n\t\t\t\tattrSet(tokens[i-2], 'class', 'task-list-item');\n\t\t\t\tattrSet(tokens[parentToken(tokens, i-2)], 'class', 'task-list');\n\t\t\t}\n\t\t}\n\t});\n};\n\nfunction attrSet(token, name, value) {\n\tvar index = token.attrIndex(name);\n\tvar attr = [name, value];\n\n\tif (index < 0) {\n\t\ttoken.attrPush(attr);\n\t} else {\n\t\ttoken.attrs[index] = attr;\n\t}\n}\n\nfunction parentToken(tokens, index) {\n\tvar targetLevel = tokens[index].level - 1;\n\tfor (var i = index - 1; i >= 0; i--) {\n\t\tif (tokens[i].level === targetLevel) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\nfunction isTodoItem(tokens, index) {\n\treturn isInline(tokens[index]) &&\n\t       isParagraph(tokens[index - 1]) &&\n\t       isListItem(tokens[index - 2]) &&\n\t       startsWithTodoMarkdown(tokens[index]);\n}\n\nfunction todoify(token, TokenConstructor) {\n\ttoken.children.unshift(makeCheckbox(token, TokenConstructor));\n\ttoken.children[1].content = token.children[1].content.slice(3);\n\ttoken.content = token.content.slice(3);\n\n\tif (useLabelWrapper) {\n\t\ttoken.children.unshift(beginLabel(TokenConstructor));\n\t\ttoken.children.push(endLabel(TokenConstructor));\n\t}\n}\n\nfunction makeCheckbox(token, TokenConstructor) {\n\tvar checkbox = new TokenConstructor('html_inline', '', 0);\n\tvar disabledAttr = disableCheckboxes ? ' disabled=\"\" ' : '';\n\tif (token.content.indexOf('[ ] ') === 0) {\n\t\tcheckbox.content = '<input class=\"task-list-item-checkbox\"' + disabledAttr + 'type=\"checkbox\">';\n\t} else if (token.content.indexOf('[x] ') === 0 || token.content.indexOf('[X] ') === 0) {\n\t\tcheckbox.content = '<input class=\"task-list-item-checkbox\" checked=\"\"' + disabledAttr + 'type=\"checkbox\">';\n\t}\n\treturn checkbox;\n}\n\n// these next two functions are kind of hacky; probably should really be a\n// true block-level token with .tag=='label'\nfunction beginLabel(TokenConstructor) {\n\tvar token = new TokenConstructor('html_inline', '', 0);\n\ttoken.content = '<label>';\n\treturn token;\n}\n\nfunction endLabel(TokenConstructor) {\n\tvar token = new TokenConstructor('html_inline', '', 0);\n\ttoken.content = '</label>';\n\treturn token;\n}\n\nfunction isInline(token) { return token.type === 'inline'; }\nfunction isParagraph(token) { return token.type === 'paragraph_open'; }\nfunction isListItem(token) { return token.type === 'list_item_open'; }\n\nfunction startsWithTodoMarkdown(token) {\n\t// leading whitespace in a list item is already trimmed off by markdown-it\n\treturn token.content.indexOf('[ ] ') === 0 || token.content.indexOf('[x] ') === 0 || token.content.indexOf('[X] ') === 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/markdown-it-task-lists/index.js\n// module id = 402\n// module chunks = 12"],"sourceRoot":""}