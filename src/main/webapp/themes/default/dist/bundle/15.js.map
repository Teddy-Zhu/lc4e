{"version":3,"sources":["webpack:////bundle/15.js","webpack:///./~/markdown-it-abbr/index.js"],"names":["webpackJsonp","394","module","exports","md","abbr_def","state","startLine","endLine","silent","label","title","ch","labelStart","labelEnd","pos","bMarks","tShift","max","eMarks","src","charCodeAt","slice","replace","trim","length","env","abbreviations","line","abbr_replace","i","j","l","tokens","token","text","nodes","reg","m","regText","regSimple","currentToken","blockTokens","RegExp","Object","keys","map","x","substr","sort","a","b","escapeRE","join","UNICODE_PUNCT_RE","UNICODE_SPACE_RE","OTHER_CHARS","split","type","children","content","lastIndex","test","exec","index","Token","push","attrs","arrayReplaceAt","utils","lib","ucmicro","P","source","Z","block","ruler","before","alt","core","after"],"mappings":"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","file":"/bundle/15.js","sourcesContent":["webpackJsonp([15],{\n\n/***/ 394:\n/***/ function(module, exports) {\n\n\"use strict\";\n// Enclose abbreviations in <abbr> tags\n//\n'use strict';\n\n\nmodule.exports = function sub_plugin(md) {\n  var escapeRE        = md.utils.escapeRE,\n      arrayReplaceAt  = md.utils.arrayReplaceAt;\n\n  // ASCII characters in Cc, Sc, Sm, Sk categories we should terminate on;\n  // you can check character classes here:\n  // http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\n  var OTHER_CHARS      = ' \\r\\n$+<=>^`|~';\n\n  var UNICODE_PUNCT_RE = md.utils.lib.ucmicro.P.source;\n  var UNICODE_SPACE_RE = md.utils.lib.ucmicro.Z.source;\n\n\n  function abbr_def(state, startLine, endLine, silent) {\n    var label, title, ch, labelStart, labelEnd,\n        pos = state.bMarks[startLine] + state.tShift[startLine],\n        max = state.eMarks[startLine];\n\n    if (pos + 2 >= max) { return false; }\n\n    if (state.src.charCodeAt(pos++) !== 0x2A/* * */) { return false; }\n    if (state.src.charCodeAt(pos++) !== 0x5B/* [ */) { return false; }\n\n    labelStart = pos;\n\n    for (; pos < max; pos++) {\n      ch = state.src.charCodeAt(pos);\n      if (ch === 0x5B /* [ */) {\n        return false;\n      } else if (ch === 0x5D /* ] */) {\n        labelEnd = pos;\n        break;\n      } else if (ch === 0x5C /* \\ */) {\n        pos++;\n      }\n    }\n\n    if (labelEnd < 0 || state.src.charCodeAt(labelEnd + 1) !== 0x3A/* : */) {\n      return false;\n    }\n\n    if (silent) { return true; }\n\n    label = state.src.slice(labelStart, labelEnd).replace(/\\\\(.)/g, '$1');\n    title = state.src.slice(labelEnd + 2, max).trim();\n    if (label.length === 0) { return false; }\n    if (title.length === 0) { return false; }\n    if (!state.env.abbreviations) { state.env.abbreviations = {}; }\n    // prepend ':' to avoid conflict with Object.prototype members\n    if (typeof state.env.abbreviations[':' + label] === 'undefined') {\n      state.env.abbreviations[':' + label] = title;\n    }\n\n    state.line = startLine + 1;\n    return true;\n  }\n\n\n  function abbr_replace(state) {\n    var i, j, l, tokens, token, text, nodes, pos, reg, m, regText, regSimple,\n        currentToken,\n        blockTokens = state.tokens;\n\n    if (!state.env.abbreviations) { return; }\n\n    regSimple = new RegExp('(?:' +\n      Object.keys(state.env.abbreviations).map(function (x) {\n        return x.substr(1);\n      }).sort(function (a, b) {\n        return b.length - a.length;\n      }).map(escapeRE).join('|') +\n    ')');\n\n    regText = '(^|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE +\n                    '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])'\n            + '(' + Object.keys(state.env.abbreviations).map(function (x) {\n                      return x.substr(1);\n                    }).sort(function (a, b) {\n                      return b.length - a.length;\n                    }).map(escapeRE).join('|') + ')'\n            + '($|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE +\n                    '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])';\n\n    reg = new RegExp(regText, 'g');\n\n    for (j = 0, l = blockTokens.length; j < l; j++) {\n      if (blockTokens[j].type !== 'inline') { continue; }\n      tokens = blockTokens[j].children;\n\n      // We scan from the end, to keep position when new tags added.\n      for (i = tokens.length - 1; i >= 0; i--) {\n        currentToken = tokens[i];\n        if (currentToken.type !== 'text') { continue; }\n\n        pos = 0;\n        text = currentToken.content;\n        reg.lastIndex = 0;\n        nodes = [];\n\n        // fast regexp run to determine whether there are any abbreviated words\n        // in the current token\n        if (!regSimple.test(text)) { continue; }\n\n        while ((m = reg.exec(text))) {\n          if (m.index > 0 || m[1].length > 0) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(pos, m.index + m[1].length);\n            nodes.push(token);\n          }\n\n          token         = new state.Token('abbr_open', 'abbr', 1);\n          token.attrs   = [ [ 'title', state.env.abbreviations[':' + m[2]] ] ];\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = m[2];\n          nodes.push(token);\n\n          token         = new state.Token('abbr_close', 'abbr', -1);\n          nodes.push(token);\n\n          reg.lastIndex -= m[3].length;\n          pos = reg.lastIndex;\n        }\n\n        if (!nodes.length) { continue; }\n\n        if (pos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(pos);\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n\n  md.block.ruler.before('reference', 'abbr_def', abbr_def, { alt: [ 'paragraph', 'reference' ] });\n\n  md.core.ruler.after('linkify', 'abbr_replace', abbr_replace);\n};\n\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// /bundle/15.js","// Enclose abbreviations in <abbr> tags\n//\n'use strict';\n\n\nmodule.exports = function sub_plugin(md) {\n  var escapeRE        = md.utils.escapeRE,\n      arrayReplaceAt  = md.utils.arrayReplaceAt;\n\n  // ASCII characters in Cc, Sc, Sm, Sk categories we should terminate on;\n  // you can check character classes here:\n  // http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\n  var OTHER_CHARS      = ' \\r\\n$+<=>^`|~';\n\n  var UNICODE_PUNCT_RE = md.utils.lib.ucmicro.P.source;\n  var UNICODE_SPACE_RE = md.utils.lib.ucmicro.Z.source;\n\n\n  function abbr_def(state, startLine, endLine, silent) {\n    var label, title, ch, labelStart, labelEnd,\n        pos = state.bMarks[startLine] + state.tShift[startLine],\n        max = state.eMarks[startLine];\n\n    if (pos + 2 >= max) { return false; }\n\n    if (state.src.charCodeAt(pos++) !== 0x2A/* * */) { return false; }\n    if (state.src.charCodeAt(pos++) !== 0x5B/* [ */) { return false; }\n\n    labelStart = pos;\n\n    for (; pos < max; pos++) {\n      ch = state.src.charCodeAt(pos);\n      if (ch === 0x5B /* [ */) {\n        return false;\n      } else if (ch === 0x5D /* ] */) {\n        labelEnd = pos;\n        break;\n      } else if (ch === 0x5C /* \\ */) {\n        pos++;\n      }\n    }\n\n    if (labelEnd < 0 || state.src.charCodeAt(labelEnd + 1) !== 0x3A/* : */) {\n      return false;\n    }\n\n    if (silent) { return true; }\n\n    label = state.src.slice(labelStart, labelEnd).replace(/\\\\(.)/g, '$1');\n    title = state.src.slice(labelEnd + 2, max).trim();\n    if (label.length === 0) { return false; }\n    if (title.length === 0) { return false; }\n    if (!state.env.abbreviations) { state.env.abbreviations = {}; }\n    // prepend ':' to avoid conflict with Object.prototype members\n    if (typeof state.env.abbreviations[':' + label] === 'undefined') {\n      state.env.abbreviations[':' + label] = title;\n    }\n\n    state.line = startLine + 1;\n    return true;\n  }\n\n\n  function abbr_replace(state) {\n    var i, j, l, tokens, token, text, nodes, pos, reg, m, regText, regSimple,\n        currentToken,\n        blockTokens = state.tokens;\n\n    if (!state.env.abbreviations) { return; }\n\n    regSimple = new RegExp('(?:' +\n      Object.keys(state.env.abbreviations).map(function (x) {\n        return x.substr(1);\n      }).sort(function (a, b) {\n        return b.length - a.length;\n      }).map(escapeRE).join('|') +\n    ')');\n\n    regText = '(^|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE +\n                    '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])'\n            + '(' + Object.keys(state.env.abbreviations).map(function (x) {\n                      return x.substr(1);\n                    }).sort(function (a, b) {\n                      return b.length - a.length;\n                    }).map(escapeRE).join('|') + ')'\n            + '($|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE +\n                    '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])';\n\n    reg = new RegExp(regText, 'g');\n\n    for (j = 0, l = blockTokens.length; j < l; j++) {\n      if (blockTokens[j].type !== 'inline') { continue; }\n      tokens = blockTokens[j].children;\n\n      // We scan from the end, to keep position when new tags added.\n      for (i = tokens.length - 1; i >= 0; i--) {\n        currentToken = tokens[i];\n        if (currentToken.type !== 'text') { continue; }\n\n        pos = 0;\n        text = currentToken.content;\n        reg.lastIndex = 0;\n        nodes = [];\n\n        // fast regexp run to determine whether there are any abbreviated words\n        // in the current token\n        if (!regSimple.test(text)) { continue; }\n\n        while ((m = reg.exec(text))) {\n          if (m.index > 0 || m[1].length > 0) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(pos, m.index + m[1].length);\n            nodes.push(token);\n          }\n\n          token         = new state.Token('abbr_open', 'abbr', 1);\n          token.attrs   = [ [ 'title', state.env.abbreviations[':' + m[2]] ] ];\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = m[2];\n          nodes.push(token);\n\n          token         = new state.Token('abbr_close', 'abbr', -1);\n          nodes.push(token);\n\n          reg.lastIndex -= m[3].length;\n          pos = reg.lastIndex;\n        }\n\n        if (!nodes.length) { continue; }\n\n        if (pos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(pos);\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n\n  md.block.ruler.before('reference', 'abbr_def', abbr_def, { alt: [ 'paragraph', 'reference' ] });\n\n  md.core.ruler.after('linkify', 'abbr_replace', abbr_replace);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/markdown-it-abbr/index.js\n// module id = 394\n// module chunks = 15"],"sourceRoot":""}